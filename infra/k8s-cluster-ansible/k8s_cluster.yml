---
- name: Install and Configure Kubernetes Cluster
  hosts: all
  become: true
  vars:
    k8s_version: "1.28.3"  # Change to the desired Kubernetes version
    pod_network_cidr: "192.168.0.0/16"  # Change to the desired Pod network CIDR

  tasks:
    ## Creating user
    - name: Add user to docker group
      user:
        name: {{ ansible_user }}
        group: docker

    ## Disabling swap memory
    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    ## Add packages
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

    ## Installing Docker engine
    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status

    ## Installing kubeadm, kubelet, and kubectl
    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet 
          - kubeadm 
          - kubectl

    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ ansible_host }}

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    ## Initializing the control-plane node
    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --node-name k8s-master --pod-network-cidr={{ pod_network_cidr }} --kubernetes-version={{ k8s_version }}
      when: "'masters' in group_names"
      args:
        creates: /etc/kubernetes/admin.conf
      register: master_init_output

    - name: Setup kubeconfig for user
      command: "{{ item }}"
      with_items:
      - mkdir -p /home/{{ ansible_user }}/.kube
      - cp -i /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
      - chown {{ ansible_user }}:{{ ansible_user }} /home/{{ ansible_user }}/.kube/config
      when: "'masters' in group_names"

    - name: Join Additional Master Node
      command: "{{ master_init_output.stdout_lines[0] }}"
      when: "'masters' in group_names"

    ## Installing calico cni
    - name: Install calico pod network
      become: false
      command: kubectl create -f https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml
      when: "'masters' in group_names"

    - name: Join Worker Nodes
      command: "{{ hostvars[groups['masters'][0]]['master_init_output']['stdout_lines'][0] }}"


  # handlers:
  #   - name: docker status
  #     service: name=docker state=started
